<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	
	">
	<!-- 扫描com.ssm底下的spring -->
	<context:component-scan base-package="com.ssm">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
<!-- 	<context:component-scan base-package="com.ssm.service">	
	<context:include-filter type="annotation" expression="service"/>
	</context:component-scan> -->


	<!-- 整合mybatis -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:dbconfig.properties</value>
			</list>
		</property>
	</bean>
	<bean id="datesource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<!-- <property name="filters" value="${filters}" />
		最大并发连接数
		<property name="maxActive" value="${maxActive}" />
		初始化连接数量
		<property name="initialSize" value="${initialSize}" />
		配置获取连接等待超时的时间
		<property name="maxWait" value="${maxWait}" />
		最小空闲连接数
		<property name="minIdle" value="${minIdle}" />
		配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		配置一个连接在池中最小生存的时间，单位是毫秒
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		打开 removeAbandoned 功能
		<property name="removeAbandoned" value="${removeAbandoned}" />
		1800 秒，也就是 30 分钟
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />

		关闭 abanded 连接时输出错误日志
		<property name="logAbandoned" value="${logAbandoned}" /> -->
	</bean>
	
	<bean id="sqlsessionfactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/mybatis.xml"></property>
		<property name="dataSource" ref="datesource"></property>
		<!-- <property name="mapperLocations"  value="classpath:useMapper/*.xml"></property> -->
	</bean>
	<bean id="sqlsessionTeamplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlsessionfactory"></constructor-arg>
	</bean>
	<!-- 面向切面，报流程 -->
	<bean id="LogAspect" class="com.ssm.aop.LogAspect"></bean>
   <!-- 配置事务-->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <property name="dataSource" ref="datesource"></property>
   </bean>
   <tx:advice id="advice" transaction-manager="transactionManager">
   <tx:attributes>
   <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
   <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
   <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
   </tx:attributes>
   </tx:advice> 
   <!-- 定义切点 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.ssm.service..*(..))"
			id="mycut" />
			<aop:pointcut expression="execution(* com.ssm.service..*.login(..))" id="deletecut"/>
	    <aop:advisor advice-ref="advice" pointcut-ref="mycut"/>
		<aop:aspect id="logaop" ref="LogAspect">
			<aop:before method="before" pointcut-ref="mycut" />
			<aop:after method="after" pointcut-ref="mycut" />
			<aop:after-returning method="afterReturn"
				returning="result" pointcut-ref="mycut" />
		</aop:aspect>
	</aop:config>
</beans>